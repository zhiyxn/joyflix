name: Docker Multi-Platform

on:
  push:
    branches:
      - "main" # 仅在 main 分支推送时触发
    tags:
      - "v*" # 仅在推送 v 开头的 tag 时触发
  pull_request:
    branches:
      - "main" # 在向 main 提交 PR 时触发

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1. (推荐) 自动获取镜像的元数据，如标签和描述
      # 这会根据 Git 事件（如 tag, main分支）自动生成聪明的 Docker 标签
      # 例如：type=semver,pattern={{version}} 会自动使用 v1.2.3 这样的 Git 标签
      #       type=sha 会生成基于 commit sha 的标签
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/joyflix

      # 2. 设置 QEMU，这是为了让 Runner 能模拟 ARM 架构
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. 设置 Docker Buildx，这是 Docker 的下一代构建工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. (核心) 一次性构建和推送所有平台
      # 注意这里的 'platforms' 参数
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # 这一行是关键：同时指定 amd64 和 arm64
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }} # 仅在非 PR 事件时才真正推送
          tags: ${{ steps.meta.outputs.tags }} # 使用第1步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用第1步生成的标签
          cache-from: type=gha # 启用 GitHub Actions 的构建缓存
          cache-to: type=gha,mode=max # 将缓存写回
